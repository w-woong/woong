// Code generated by MockGen. DO NOT EDIT.
// Source: ./appconfig_usc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/w-woong/woong/dto"
)

// MockAppConfigUsc is a mock of AppConfigUsc interface.
type MockAppConfigUsc struct {
	ctrl     *gomock.Controller
	recorder *MockAppConfigUscMockRecorder
}

// MockAppConfigUscMockRecorder is the mock recorder for MockAppConfigUsc.
type MockAppConfigUscMockRecorder struct {
	mock *MockAppConfigUsc
}

// NewMockAppConfigUsc creates a new mock instance.
func NewMockAppConfigUsc(ctrl *gomock.Controller) *MockAppConfigUsc {
	mock := &MockAppConfigUsc{ctrl: ctrl}
	mock.recorder = &MockAppConfigUscMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConfigUsc) EXPECT() *MockAppConfigUscMockRecorder {
	return m.recorder
}

// AddAppConfig mocks base method.
func (m *MockAppConfigUsc) AddAppConfig(ctx context.Context, appConfig dto.AppConfig) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppConfig", ctx, appConfig)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAppConfig indicates an expected call of AddAppConfig.
func (mr *MockAppConfigUscMockRecorder) AddAppConfig(ctx, appConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppConfig", reflect.TypeOf((*MockAppConfigUsc)(nil).AddAppConfig), ctx, appConfig)
}

// ChangeAppConfig mocks base method.
func (m *MockAppConfigUsc) ChangeAppConfig(ctx context.Context, appConfig dto.AppConfig) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAppConfig", ctx, appConfig)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAppConfig indicates an expected call of ChangeAppConfig.
func (mr *MockAppConfigUscMockRecorder) ChangeAppConfig(ctx, appConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAppConfig", reflect.TypeOf((*MockAppConfigUsc)(nil).ChangeAppConfig), ctx, appConfig)
}

// FindAppConfig mocks base method.
func (m *MockAppConfigUsc) FindAppConfig(ctx context.Context, id string) (dto.AppConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAppConfig", ctx, id)
	ret0, _ := ret[0].(dto.AppConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAppConfig indicates an expected call of FindAppConfig.
func (mr *MockAppConfigUscMockRecorder) FindAppConfig(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAppConfig", reflect.TypeOf((*MockAppConfigUsc)(nil).FindAppConfig), ctx, id)
}
